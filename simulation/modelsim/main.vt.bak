// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "07/19/2022 18:54:05"
                                                                                
// Verilog Test Bench template for design : main
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ns/ 1 ns
module main_vlg_tst();

reg eachvec;

reg clk_in;
reg start_button;
reg reset;
                                            
wire D_out;
wire Hold;
wire Reset;
wire out_clk_negative;
wire out_clk_positive;


reg [24:0] cnt;
initial cnt <= 1'b0;
                     
main i1 (

	.D_out(D_out),
	.Hold(Hold),
	.Reset(Reset),
	.clk_in(clk_in),
	.out_clk_negative(out_clk_negative),
	.out_clk_positive(out_clk_positive),
	.start_button(start_button),
	.reset(reset)
);
initial begin
clk_in <= 1'b0;    
start_button <= 1'b1; 
reset <= 1'b1;
#10000 start_button <= 1'b0;                                              
#10001 start_button <= 1'b1;
#1000000 reset  <= 1'b0;

#100000
#10000 start_button <= 1'b0;                                              
#10000 start_button <= 1'b1;


               
$display("Running testbench");                       
end     
                                               
always 
#10 clk_in <= !clk_in;

always @(posedge clk_in) begin
end
endmodule

